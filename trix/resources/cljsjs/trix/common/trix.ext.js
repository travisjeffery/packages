/**********************************************************************
 * Extern for Trix
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var Trix = {
  "Attachment": {
    "__super__": {
      "constructor": {
        "__super__": {},
        "fromJSONString": function () {},
        "proxyMethod": function () {}
      },
      "contentsForInspection": function () {},
      "getCacheKey": function () {},
      "hasSameConstructorAs": function () {},
      "inspect": function () {},
      "isEqualTo": function () {},
      "toJSONString": function () {},
      "toUTF16String": function () {}
    },
    "attachmentForFile": function () {},
    "attributesForFile": function () {},
    "fromJSON": function () {},
    "fromJSONString": function () {},
    "previewablePattern": {},
    "proxyMethod": function () {}
  },
  "AttachmentEditorController": {
    "__super__": {},
    "proxyMethod": function () {}
  },
  "AttachmentManager": {
    "__super__": {},
    "proxyMethod": function () {}
  },
  "AttachmentPiece": {
    "__super__": {
      "canBeConsolidatedWith": function () {},
      "canBeGrouped": function () {},
      "canBeGroupedWith": function () {},
      "constructor": {
        "__super__": {
          "constructor": {
            "__super__": {},
            "fromJSONString": function () {},
            "proxyMethod": function () {}
          },
          "contentsForInspection": function () {},
          "getCacheKey": function () {},
          "hasSameConstructorAs": function () {},
          "inspect": function () {},
          "isEqualTo": function () {},
          "toJSONString": function () {},
          "toUTF16String": function () {}
        },
        "fromJSON": function () {},
        "fromJSONString": function () {},
        "proxyMethod": function () {},
        "registerType": function () {},
        "types": {
          "attachment": function () {},
          "string": {
            "__super__": {},
            "fromJSON": function () {},
            "fromJSONString": function () {},
            "proxyMethod": function () {},
            "registerType": function () {},
            "type": {},
            "types": {}
          }
        }
      },
      "contentsForInspection": function () {},
      "copy": function () {},
      "copyWithAdditionalAttributes": function () {},
      "copyWithAttributes": function () {},
      "copyWithoutAttribute": function () {},
      "getAttribute": function () {},
      "getAttributes": function () {},
      "getAttributesHash": function () {},
      "getCacheKey": function () {},
      "getCommonAttributes": function () {},
      "getLength": function () {},
      "hasAttribute": function () {},
      "hasSameAttributesAsPiece": function () {},
      "hasSameConstructorAs": function () {},
      "hasSameStringValueAsPiece": function () {},
      "inspect": function () {},
      "isBlockBreak": function () {},
      "isEmpty": function () {},
      "isEqualTo": function () {},
      "isSerializable": function () {},
      "toJSON": function () {},
      "toJSONString": function () {},
      "toUTF16String": function () {}
    },
    "fromJSON": function () {},
    "fromJSONString": function () {},
    "permittedAttributes": {},
    "proxyMethod": function () {},
    "registerType": function () {},
    "type": {},
    "types": {
      "attachment": function () {},
      "string": {
        "__super__": {
          "canBeConsolidatedWith": function () {},
          "canBeGrouped": function () {},
          "canBeGroupedWith": function () {},
          "constructor": {
            "__super__": {
              "constructor": {
                "__super__": {},
                "fromJSONString": function () {},
                "proxyMethod": function () {}
              },
              "contentsForInspection": function () {},
              "getCacheKey": function () {},
              "hasSameConstructorAs": function () {},
              "inspect": function () {},
              "isEqualTo": function () {},
              "toJSONString": function () {},
              "toUTF16String": function () {}
            },
            "fromJSON": function () {},
            "fromJSONString": function () {},
            "proxyMethod": function () {},
            "registerType": function () {},
            "types": {}
          },
          "contentsForInspection": function () {},
          "copy": function () {},
          "copyWithAdditionalAttributes": function () {},
          "copyWithAttributes": function () {},
          "copyWithoutAttribute": function () {},
          "getAttribute": function () {},
          "getAttributes": function () {},
          "getAttributesHash": function () {},
          "getCacheKey": function () {},
          "getCommonAttributes": function () {},
          "getLength": function () {},
          "hasAttribute": function () {},
          "hasSameAttributesAsPiece": function () {},
          "hasSameConstructorAs": function () {},
          "hasSameStringValueAsPiece": function () {},
          "inspect": function () {},
          "isBlockBreak": function () {},
          "isEmpty": function () {},
          "isEqualTo": function () {},
          "isSerializable": function () {},
          "toJSON": function () {},
          "toJSONString": function () {},
          "toUTF16String": function () {}
        },
        "fromJSON": function () {},
        "fromJSONString": function () {},
        "proxyMethod": function () {},
        "registerType": function () {},
        "type": {},
        "types": {}
      }
    }
  },
  "AttachmentView": {
    "__super__": {
      "cacheViewForObject": function () {},
      "constructor": {
        "__super__": {},
        "proxyMethod": function () {}
      },
      "createChildView": function () {},
      "disableViewCaching": function () {},
      "enableViewCaching": function () {},
      "findElement": function () {},
      "findElementForObject": function () {},
      "findOrCreateCachedChildView": function () {},
      "findViewForObject": function () {},
      "garbageCollectCachedViews": function () {},
      "getAllChildViews": function () {},
      "getCachedViewForObject": function () {},
      "getNodes": function () {},
      "getViewCache": function () {},
      "invalidate": function () {},
      "invalidateViewForObject": function () {},
      "isViewCachingEnabled": function () {},
      "recordChildView": function () {}
    },
    "attachmentSelector": {},
    "proxyMethod": function () {}
  },
  "BasicObject": {
    "proxyMethod": function () {}
  },
  "Block": {
    "__super__": {
      "constructor": {
        "__super__": {},
        "fromJSONString": function () {},
        "proxyMethod": function () {}
      },
      "contentsForInspection": function () {},
      "getCacheKey": function () {},
      "hasSameConstructorAs": function () {},
      "inspect": function () {},
      "isEqualTo": function () {},
      "toJSONString": function () {},
      "toUTF16String": function () {}
    },
    "fromJSON": function () {},
    "fromJSONString": function () {},
    "proxyMethod": function () {}
  },
  "BlockView": {
    "__super__": {
      "cacheViewForObject": function () {},
      "constructor": {
        "__super__": {},
        "proxyMethod": function () {}
      },
      "createChildView": function () {},
      "disableViewCaching": function () {},
      "enableViewCaching": function () {},
      "findElement": function () {},
      "findElementForObject": function () {},
      "findOrCreateCachedChildView": function () {},
      "findViewForObject": function () {},
      "garbageCollectCachedViews": function () {},
      "getAllChildViews": function () {},
      "getCachedViewForObject": function () {},
      "getNodes": function () {},
      "getViewCache": function () {},
      "invalidate": function () {},
      "invalidateViewForObject": function () {},
      "isViewCachingEnabled": function () {},
      "recordChildView": function () {}
    },
    "proxyMethod": function () {}
  },
  "Composition": {
    "__super__": {},
    "proxyMethod": function () {}
  },
  "CompositionController": {
    "__super__": {},
    "proxyMethod": function () {}
  },
  "Controller": {
    "__super__": {},
    "proxyMethod": function () {}
  },
  "Document": {
    "__super__": {
      "constructor": {
        "__super__": {},
        "fromJSONString": function () {},
        "proxyMethod": function () {}
      },
      "contentsForInspection": function () {},
      "getCacheKey": function () {},
      "hasSameConstructorAs": function () {},
      "inspect": function () {},
      "isEqualTo": function () {},
      "toJSONString": function () {},
      "toUTF16String": function () {}
    },
    "fromHTML": function () {},
    "fromJSON": function () {},
    "fromJSONString": function () {},
    "fromString": function () {},
    "proxyMethod": function () {}
  },
  "DocumentView": {
    "__super__": {
      "cacheViewForObject": function () {},
      "constructor": {
        "__super__": {},
        "proxyMethod": function () {}
      },
      "createChildView": function () {},
      "disableViewCaching": function () {},
      "enableViewCaching": function () {},
      "findElement": function () {},
      "findElementForObject": function () {},
      "findOrCreateCachedChildView": function () {},
      "findViewForObject": function () {},
      "garbageCollectCachedViews": function () {},
      "getAllChildViews": function () {},
      "getCachedViewForObject": function () {},
      "getNodes": function () {},
      "getViewCache": function () {},
      "invalidate": function () {},
      "invalidateViewForObject": function () {},
      "isViewCachingEnabled": function () {},
      "recordChildView": function () {}
    },
    "proxyMethod": function () {},
    "render": function () {}
  },
  "Editor": function () {},
  "EditorController": {
    "__super__": {
      "constructor": {
        "__super__": {},
        "proxyMethod": function () {}
      }
    },
    "proxyMethod": function () {}
  },
  "ElementStore": function () {},
  "FileVerificationOperation": {
    "__super__": {
      "catch": function () {},
      "constructor": {
        "__super__": {},
        "proxyMethod": function () {}
      },
      "getPromise": function () {},
      "hasFailed": function () {},
      "hasPerformed": function () {},
      "hasSucceeded": function () {},
      "isPerforming": function () {},
      "perform": function () {},
      "release": function () {},
      "then": function () {}
    },
    "proxyMethod": function () {}
  },
  "HTMLParser": {
    "__super__": {},
    "parse": function () {},
    "proxyMethod": function () {}
  },
  "HTMLSanitizer": {
    "__super__": {},
    "proxyMethod": function () {},
    "sanitize": function () {}
  },
  "Hash": {
    "__super__": {
      "constructor": {
        "__super__": {},
        "fromJSONString": function () {},
        "proxyMethod": function () {}
      },
      "contentsForInspection": function () {},
      "getCacheKey": function () {},
      "hasSameConstructorAs": function () {},
      "inspect": function () {},
      "isEqualTo": function () {},
      "toJSONString": function () {},
      "toUTF16String": function () {}
    },
    "box": function () {},
    "fromCommonAttributesOfObjects": function () {},
    "fromJSONString": function () {},
    "proxyMethod": function () {}
  },
  "ImagePreloadOperation": {
    "__super__": {
      "catch": function () {},
      "constructor": {
        "__super__": {},
        "proxyMethod": function () {}
      },
      "getPromise": function () {},
      "hasFailed": function () {},
      "hasPerformed": function () {},
      "hasSucceeded": function () {},
      "isPerforming": function () {},
      "perform": function () {},
      "release": function () {},
      "then": function () {}
    },
    "proxyMethod": function () {}
  },
  "InputController": {
    "__super__": {},
    "proxyMethod": function () {}
  },
  "Level0InputController": {
    "__super__": {
      "attachFiles": function () {},
      "constructor": {
        "__super__": {},
        "proxyMethod": function () {}
      },
      "editorDidSyncDocumentView": function () {},
      "editorWillSyncDocumentView": function () {},
      "elementDidMutate": function () {},
      "events": {},
      "handleInput": function () {},
      "handlerFor": function () {},
      "requestRender": function () {},
      "requestReparse": function () {}
    },
    "proxyMethod": function () {}
  },
  "Level2InputController": {
    "__super__": {
      "attachFiles": function () {},
      "constructor": {
        "__super__": {},
        "proxyMethod": function () {}
      },
      "editorDidSyncDocumentView": function () {},
      "editorWillSyncDocumentView": function () {},
      "elementDidMutate": function () {},
      "events": {},
      "handleInput": function () {},
      "handlerFor": function () {},
      "requestRender": function () {},
      "requestReparse": function () {}
    },
    "proxyMethod": function () {}
  },
  "LineBreakInsertion": function () {},
  "LocationMapper": function () {},
  "ManagedAttachment": {
    "__super__": {},
    "proxyMethod": function () {}
  },
  "MutationObserver": {
    "__super__": {},
    "proxyMethod": function () {}
  },
  "NON_BREAKING_SPACE": {},
  "OBJECT_REPLACEMENT_CHARACTER": {},
  "Object": {
    "__super__": {},
    "fromJSONString": function () {},
    "proxyMethod": function () {}
  },
  "ObjectGroup": {
    "groupObjects": function () {}
  },
  "ObjectGroupView": {
    "__super__": {
      "cacheViewForObject": function () {},
      "constructor": {
        "__super__": {},
        "proxyMethod": function () {}
      },
      "createChildView": function () {},
      "disableViewCaching": function () {},
      "enableViewCaching": function () {},
      "findElement": function () {},
      "findElementForObject": function () {},
      "findOrCreateCachedChildView": function () {},
      "findViewForObject": function () {},
      "garbageCollectCachedViews": function () {},
      "getAllChildViews": function () {},
      "getCachedViewForObject": function () {},
      "getNodes": function () {},
      "getViewCache": function () {},
      "invalidate": function () {},
      "invalidateViewForObject": function () {},
      "isViewCachingEnabled": function () {},
      "recordChildView": function () {}
    },
    "proxyMethod": function () {}
  },
  "ObjectMap": {
    "__super__": {},
    "proxyMethod": function () {}
  },
  "ObjectView": {
    "__super__": {},
    "proxyMethod": function () {}
  },
  "Operation": {
    "__super__": {},
    "proxyMethod": function () {}
  },
  "Piece": {
    "__super__": {
      "constructor": {
        "__super__": {},
        "fromJSONString": function () {},
        "proxyMethod": function () {}
      },
      "contentsForInspection": function () {},
      "getCacheKey": function () {},
      "hasSameConstructorAs": function () {},
      "inspect": function () {},
      "isEqualTo": function () {},
      "toJSONString": function () {},
      "toUTF16String": function () {}
    },
    "fromJSON": function () {},
    "fromJSONString": function () {},
    "proxyMethod": function () {},
    "registerType": function () {},
    "types": {
      "attachment": {
        "__super__": {
          "canBeConsolidatedWith": function () {},
          "canBeGrouped": function () {},
          "canBeGroupedWith": function () {},
          "constructor": function () {},
          "contentsForInspection": function () {},
          "copy": function () {},
          "copyWithAdditionalAttributes": function () {},
          "copyWithAttributes": function () {},
          "copyWithoutAttribute": function () {},
          "getAttribute": function () {},
          "getAttributes": function () {},
          "getAttributesHash": function () {},
          "getCacheKey": function () {},
          "getCommonAttributes": function () {},
          "getLength": function () {},
          "hasAttribute": function () {},
          "hasSameAttributesAsPiece": function () {},
          "hasSameConstructorAs": function () {},
          "hasSameStringValueAsPiece": function () {},
          "inspect": function () {},
          "isBlockBreak": function () {},
          "isEmpty": function () {},
          "isEqualTo": function () {},
          "isSerializable": function () {},
          "toJSON": function () {},
          "toJSONString": function () {},
          "toUTF16String": function () {}
        },
        "fromJSON": function () {},
        "fromJSONString": function () {},
        "permittedAttributes": {},
        "proxyMethod": function () {},
        "registerType": function () {},
        "type": {},
        "types": {}
      },
      "string": {
        "__super__": {
          "canBeConsolidatedWith": function () {},
          "canBeGrouped": function () {},
          "canBeGroupedWith": function () {},
          "constructor": function () {},
          "contentsForInspection": function () {},
          "copy": function () {},
          "copyWithAdditionalAttributes": function () {},
          "copyWithAttributes": function () {},
          "copyWithoutAttribute": function () {},
          "getAttribute": function () {},
          "getAttributes": function () {},
          "getAttributesHash": function () {},
          "getCacheKey": function () {},
          "getCommonAttributes": function () {},
          "getLength": function () {},
          "hasAttribute": function () {},
          "hasSameAttributesAsPiece": function () {},
          "hasSameConstructorAs": function () {},
          "hasSameStringValueAsPiece": function () {},
          "inspect": function () {},
          "isBlockBreak": function () {},
          "isEmpty": function () {},
          "isEqualTo": function () {},
          "isSerializable": function () {},
          "toJSON": function () {},
          "toJSONString": function () {},
          "toUTF16String": function () {}
        },
        "fromJSON": function () {},
        "fromJSONString": function () {},
        "proxyMethod": function () {},
        "registerType": function () {},
        "type": {},
        "types": {}
      }
    }
  },
  "PieceView": {
    "__super__": {
      "cacheViewForObject": function () {},
      "constructor": {
        "__super__": {},
        "proxyMethod": function () {}
      },
      "createChildView": function () {},
      "disableViewCaching": function () {},
      "enableViewCaching": function () {},
      "findElement": function () {},
      "findElementForObject": function () {},
      "findOrCreateCachedChildView": function () {},
      "findViewForObject": function () {},
      "garbageCollectCachedViews": function () {},
      "getAllChildViews": function () {},
      "getCachedViewForObject": function () {},
      "getNodes": function () {},
      "getViewCache": function () {},
      "invalidate": function () {},
      "invalidateViewForObject": function () {},
      "isViewCachingEnabled": function () {},
      "recordChildView": function () {}
    },
    "proxyMethod": function () {}
  },
  "PointMapper": function () {},
  "PreviewableAttachmentView": {
    "__super__": {
      "attachmentDidChangeUploadProgress": function () {},
      "cacheViewForObject": function () {},
      "constructor": {
        "__super__": {
          "cacheViewForObject": function () {},
          "constructor": {
            "__super__": {},
            "proxyMethod": function () {}
          },
          "createChildView": function () {},
          "disableViewCaching": function () {},
          "enableViewCaching": function () {},
          "findElement": function () {},
          "findElementForObject": function () {},
          "findOrCreateCachedChildView": function () {},
          "findViewForObject": function () {},
          "garbageCollectCachedViews": function () {},
          "getAllChildViews": function () {},
          "getCachedViewForObject": function () {},
          "getNodes": function () {},
          "getViewCache": function () {},
          "invalidate": function () {},
          "invalidateViewForObject": function () {},
          "isViewCachingEnabled": function () {},
          "recordChildView": function () {}
        },
        "attachmentSelector": {},
        "proxyMethod": function () {}
      },
      "createCaptionElement": function () {},
      "createChildView": function () {},
      "createContentNodes": function () {},
      "createNodes": function () {},
      "disableViewCaching": function () {},
      "enableViewCaching": function () {},
      "findElement": function () {},
      "findElementForObject": function () {},
      "findOrCreateCachedChildView": function () {},
      "findProgressElement": function () {},
      "findViewForObject": function () {},
      "garbageCollectCachedViews": function () {},
      "getAllChildViews": function () {},
      "getCachedViewForObject": function () {},
      "getCaptionConfig": function () {},
      "getClassName": function () {},
      "getData": function () {},
      "getHref": function () {},
      "getNodes": function () {},
      "getViewCache": function () {},
      "invalidate": function () {},
      "invalidateViewForObject": function () {},
      "isViewCachingEnabled": function () {},
      "recordChildView": function () {}
    },
    "attachmentSelector": {},
    "proxyMethod": function () {}
  },
  "SelectionChangeObserver": {
    "__super__": {},
    "proxyMethod": function () {}
  },
  "SelectionManager": {
    "__super__": {},
    "proxyMethod": function () {}
  },
  "SplittableList": {
    "__super__": {
      "constructor": {
        "__super__": {},
        "fromJSONString": function () {},
        "proxyMethod": function () {}
      },
      "contentsForInspection": function () {},
      "getCacheKey": function () {},
      "hasSameConstructorAs": function () {},
      "inspect": function () {},
      "isEqualTo": function () {},
      "toJSONString": function () {},
      "toUTF16String": function () {}
    },
    "box": function () {},
    "fromJSONString": function () {},
    "proxyMethod": function () {}
  },
  "StringPiece": {
    "__super__": {
      "canBeConsolidatedWith": function () {},
      "canBeGrouped": function () {},
      "canBeGroupedWith": function () {},
      "constructor": {
        "__super__": {
          "constructor": {
            "__super__": {},
            "fromJSONString": function () {},
            "proxyMethod": function () {}
          },
          "contentsForInspection": function () {},
          "getCacheKey": function () {},
          "hasSameConstructorAs": function () {},
          "inspect": function () {},
          "isEqualTo": function () {},
          "toJSONString": function () {},
          "toUTF16String": function () {}
        },
        "fromJSON": function () {},
        "fromJSONString": function () {},
        "proxyMethod": function () {},
        "registerType": function () {},
        "types": {
          "attachment": {
            "__super__": {},
            "fromJSON": function () {},
            "fromJSONString": function () {},
            "permittedAttributes": {},
            "proxyMethod": function () {},
            "registerType": function () {},
            "type": {},
            "types": {}
          },
          "string": function () {}
        }
      },
      "contentsForInspection": function () {},
      "copy": function () {},
      "copyWithAdditionalAttributes": function () {},
      "copyWithAttributes": function () {},
      "copyWithoutAttribute": function () {},
      "getAttribute": function () {},
      "getAttributes": function () {},
      "getAttributesHash": function () {},
      "getCacheKey": function () {},
      "getCommonAttributes": function () {},
      "getLength": function () {},
      "hasAttribute": function () {},
      "hasSameAttributesAsPiece": function () {},
      "hasSameConstructorAs": function () {},
      "hasSameStringValueAsPiece": function () {},
      "inspect": function () {},
      "isBlockBreak": function () {},
      "isEmpty": function () {},
      "isEqualTo": function () {},
      "isSerializable": function () {},
      "toJSON": function () {},
      "toJSONString": function () {},
      "toUTF16String": function () {}
    },
    "fromJSON": function () {},
    "fromJSONString": function () {},
    "proxyMethod": function () {},
    "registerType": function () {},
    "type": {},
    "types": {
      "attachment": {
        "__super__": {
          "canBeConsolidatedWith": function () {},
          "canBeGrouped": function () {},
          "canBeGroupedWith": function () {},
          "constructor": {
            "__super__": {
              "constructor": {
                "__super__": {},
                "fromJSONString": function () {},
                "proxyMethod": function () {}
              },
              "contentsForInspection": function () {},
              "getCacheKey": function () {},
              "hasSameConstructorAs": function () {},
              "inspect": function () {},
              "isEqualTo": function () {},
              "toJSONString": function () {},
              "toUTF16String": function () {}
            },
            "fromJSON": function () {},
            "fromJSONString": function () {},
            "proxyMethod": function () {},
            "registerType": function () {},
            "types": {}
          },
          "contentsForInspection": function () {},
          "copy": function () {},
          "copyWithAdditionalAttributes": function () {},
          "copyWithAttributes": function () {},
          "copyWithoutAttribute": function () {},
          "getAttribute": function () {},
          "getAttributes": function () {},
          "getAttributesHash": function () {},
          "getCacheKey": function () {},
          "getCommonAttributes": function () {},
          "getLength": function () {},
          "hasAttribute": function () {},
          "hasSameAttributesAsPiece": function () {},
          "hasSameConstructorAs": function () {},
          "hasSameStringValueAsPiece": function () {},
          "inspect": function () {},
          "isBlockBreak": function () {},
          "isEmpty": function () {},
          "isEqualTo": function () {},
          "isSerializable": function () {},
          "toJSON": function () {},
          "toJSONString": function () {},
          "toUTF16String": function () {}
        },
        "fromJSON": function () {},
        "fromJSONString": function () {},
        "permittedAttributes": {},
        "proxyMethod": function () {},
        "registerType": function () {},
        "type": {},
        "types": {}
      },
      "string": function () {}
    }
  },
  "Text": {
    "__super__": {
      "constructor": {
        "__super__": {},
        "fromJSONString": function () {},
        "proxyMethod": function () {}
      },
      "contentsForInspection": function () {},
      "getCacheKey": function () {},
      "hasSameConstructorAs": function () {},
      "inspect": function () {},
      "isEqualTo": function () {},
      "toJSONString": function () {},
      "toUTF16String": function () {}
    },
    "fromJSON": function () {},
    "fromJSONString": function () {},
    "proxyMethod": function () {},
    "textForAttachmentWithAttributes": function () {},
    "textForStringWithAttributes": function () {}
  },
  "TextView": {
    "__super__": {
      "cacheViewForObject": function () {},
      "constructor": {
        "__super__": {},
        "proxyMethod": function () {}
      },
      "createChildView": function () {},
      "disableViewCaching": function () {},
      "enableViewCaching": function () {},
      "findElement": function () {},
      "findElementForObject": function () {},
      "findOrCreateCachedChildView": function () {},
      "findViewForObject": function () {},
      "garbageCollectCachedViews": function () {},
      "getAllChildViews": function () {},
      "getCachedViewForObject": function () {},
      "getNodes": function () {},
      "getViewCache": function () {},
      "invalidate": function () {},
      "invalidateViewForObject": function () {},
      "isViewCachingEnabled": function () {},
      "recordChildView": function () {}
    },
    "proxyMethod": function () {}
  },
  "ToolbarController": {
    "__super__": {},
    "proxyMethod": function () {}
  },
  "UTF16String": {
    "__super__": {},
    "box": function () {},
    "fromCodepoints": function () {},
    "fromUCS2String": function () {},
    "proxyMethod": function () {}
  },
  "UndoManager": {
    "__super__": {},
    "proxyMethod": function () {}
  },
  "VERSION": {},
  "ZERO_WIDTH_SPACE": {},
  "arrayStartsWith": function () {},
  "arraysAreEqual": function () {},
  "attachmentGalleryFilter": function () {},
  "breakableWhitespacePattern": {},
  "browser": {
    "composesExistingText": {},
    "forcesObjectResizing": {},
    "supportsInputEvents": {}
  },
  "config": {
    "attachments": {
      "file": {
        "caption": {
          "size": {}
        }
      },
      "preview": {
        "caption": {
          "name": {},
          "size": {}
        },
        "presentation": {}
      }
    },
    "blockAttributes": {
      "attachmentGallery": {
        "exclusive": {},
        "group": {},
        "parse": {},
        "tagName": {},
        "terminal": {}
      },
      "bullet": {
        "group": {},
        "listAttribute": {},
        "nestable": {},
        "tagName": {},
        "test": function () {}
      },
      "bulletList": {
        "parse": {},
        "tagName": {}
      },
      "code": {
        "tagName": {},
        "terminal": {},
        "text": {
          "plaintext": {}
        }
      },
      "default": {
        "parse": {},
        "tagName": {}
      },
      "heading1": {
        "breakOnReturn": {},
        "group": {},
        "tagName": {},
        "terminal": {}
      },
      "number": {
        "group": {},
        "listAttribute": {},
        "nestable": {},
        "tagName": {},
        "test": function () {}
      },
      "numberList": {
        "parse": {},
        "tagName": {}
      },
      "quote": {
        "nestable": {},
        "tagName": {}
      }
    },
    "css": {
      "attachment": {},
      "attachmentCaption": {},
      "attachmentCaptionEditor": {},
      "attachmentGallery": {},
      "attachmentMetadata": {},
      "attachmentMetadataContainer": {},
      "attachmentName": {},
      "attachmentProgress": {},
      "attachmentSize": {},
      "attachmentToolbar": {}
    },
    "fileSize": {
      "formatter": function () {},
      "precision": {},
      "prefix": {}
    },
    "input": {
      "fileInputId": {},
      "getLevel": function () {},
      "level2Enabled": {},
      "pickFiles": function () {}
    },
    "keyNames": {
      "13": {},
      "27": {},
      "37": {},
      "39": {},
      "46": {},
      "68": {},
      "72": {},
      "79": {},
      "8": {},
      "9": {}
    },
    "lang": {
      "GB": {},
      "KB": {},
      "MB": {},
      "PB": {},
      "TB": {},
      "attachFiles": {},
      "bold": {},
      "bullets": {},
      "byte": {},
      "bytes": {},
      "captionPlaceholder": {},
      "code": {},
      "heading1": {},
      "indent": {},
      "italic": {},
      "link": {},
      "numbers": {},
      "outdent": {},
      "quote": {},
      "redo": {},
      "remove": {},
      "strike": {},
      "undo": {},
      "unlink": {},
      "url": {},
      "urlPlaceholder": {}
    },
    "textAttributes": {
      "bold": {
        "inheritable": {},
        "parser": function () {},
        "tagName": {}
      },
      "frozen": {
        "style": {
          "backgroundColor": {}
        }
      },
      "href": {
        "groupTagName": {},
        "parser": function () {}
      },
      "italic": {
        "inheritable": {},
        "parser": function () {},
        "tagName": {}
      },
      "strike": {
        "inheritable": {},
        "tagName": {}
      }
    },
    "toolbar": {
      "getDefaultHTML": function () {}
    },
    "undoInterval": {}
  },
  "copyObject": function () {},
  "dataTransferIsPlainText": function () {},
  "dataTransferIsWritable": function () {},
  "defer": function () {},
  "deserializeFromContentType": function () {},
  "deserializers": {
    "application/json": function () {},
    "text/html": function () {}
  },
  "elementContainsNode": function () {},
  "elementMatchesSelector": function () {},
  "escapeHTML": function () {},
  "extend": function () {},
  "findChildIndexOfNode": function () {},
  "findClosestElementFromNode": function () {},
  "findElementFromContainerAndOffset": function () {},
  "findInnerElement": function () {},
  "findNodeFromContainerAndOffset": function () {},
  "getAllAttributeNames": function () {},
  "getBlockAttributeNames": function () {},
  "getBlockConfig": function () {},
  "getBlockTagNames": function () {},
  "getDOMRange": function () {},
  "getDOMSelection": function () {},
  "getListAttributeNames": function () {},
  "getTextAttributeNames": function () {},
  "getTextConfig": function () {},
  "handleEvent": function () {},
  "handleEventOnce": function () {},
  "innerElementIsActive": function () {},
  "keyEventIsKeyboardCommand": function () {},
  "makeElement": function () {},
  "nodeIsAttachmentElement": function () {},
  "nodeIsBlockContainer": function () {},
  "nodeIsBlockStart": function () {},
  "nodeIsBlockStartComment": function () {},
  "nodeIsCommentNode": function () {},
  "nodeIsCursorTarget": function () {},
  "nodeIsEmptyTextNode": function () {},
  "nodeIsTextNode": function () {},
  "nodeProbablyIsBlockContainer": function () {},
  "normalizeNewlines": function () {},
  "normalizeRange": function () {},
  "normalizeSpaces": function () {},
  "objectsAreEqual": function () {},
  "rangeIsCollapsed": function () {},
  "rangesAreEqual": function () {},
  "registerElement": function () {},
  "removeNode": function () {},
  "selectionChangeObserver": {
    "constructor": {
      "__super__": {},
      "proxyMethod": function () {}
    },
    "notifySelectionManagersOfSelectionChange": function () {},
    "registerSelectionManager": function () {},
    "reset": function () {},
    "run": function () {},
    "selectionManagers": {},
    "start": function () {},
    "stop": function () {},
    "unregisterSelectionManager": function () {},
    "update": function () {}
  },
  "serializeToContentType": function () {},
  "serializers": {
    "application/json": function () {},
    "text/html": function () {}
  },
  "setDOMRange": function () {},
  "spliceArray": function () {},
  "squishBreakableWhitespace": function () {},
  "summarizeArrayChange": function () {},
  "summarizeStringChange": function () {},
  "tagName": function () {},
  "triggerEvent": function () {},
  "walkTree": function () {}
};
Trix.Attachment.prototype = {
  "constructor": function () {},
  "contentsForInspection": function () {},
  "didChangeAttributes": function () {},
  "getAttribute": function () {},
  "getAttributes": function () {},
  "getCacheKey": function () {},
  "getContent": function () {},
  "getContentType": function () {},
  "getExtension": function () {},
  "getFile": function () {},
  "getFilename": function () {},
  "getFilesize": function () {},
  "getFormattedFilesize": function () {},
  "getHeight": function () {},
  "getHref": function () {},
  "getPreviewURL": function () {},
  "getType": function () {},
  "getURL": function () {},
  "getUploadProgress": function () {},
  "getWidth": function () {},
  "hasAttribute": function () {},
  "hasContent": function () {},
  "hasSameConstructorAs": function () {},
  "inspect": function () {},
  "isEqualTo": function () {},
  "isPending": function () {},
  "isPreviewable": function () {},
  "preload": function () {},
  "preloadFile": function () {},
  "preloadURL": function () {},
  "releaseFile": function () {},
  "releasePreloadedFile": function () {},
  "setAttributes": function () {},
  "setFile": function () {},
  "setPreviewURL": function () {},
  "setUploadProgress": function () {},
  "toJSON": function () {},
  "toJSONString": function () {},
  "toUTF16String": function () {}
};
Trix.Attachment.__super__.constructor.prototype = {
  "constructor": function () {},
  "contentsForInspection": function () {},
  "getCacheKey": function () {},
  "hasSameConstructorAs": function () {},
  "inspect": function () {},
  "isEqualTo": function () {},
  "toJSONString": function () {},
  "toUTF16String": function () {}
};
Trix.AttachmentEditorController.prototype = {
  "addToolbar": function () {},
  "constructor": function () {},
  "didBlurCaption": function () {},
  "didChangeCaption": function () {},
  "didClickActionButton": function () {},
  "didClickToolbar": function () {},
  "didInputCaption": function () {},
  "didKeyDownCaption": function () {},
  "install": function () {},
  "installCaptionEditor": function () {},
  "makeElementMutable": function () {},
  "savePendingCaption": function () {},
  "uninstall": function () {}
};
Trix.AttachmentManager.prototype = {
  "attachmentIsManaged": function () {},
  "constructor": function () {},
  "getAttachments": function () {},
  "manageAttachment": function () {},
  "requestRemovalOfAttachment": function () {},
  "unmanageAttachment": function () {}
};
Trix.AttachmentPiece.prototype = {
  "canBeConsolidatedWith": function () {},
  "canBeGrouped": function () {},
  "canBeGroupedWith": function () {},
  "constructor": function () {},
  "contentsForInspection": function () {},
  "copy": function () {},
  "copyWithAdditionalAttributes": function () {},
  "copyWithAttributes": function () {},
  "copyWithoutAttribute": function () {},
  "ensureAttachmentExclusivelyHasAttribute": function () {},
  "getAttribute": function () {},
  "getAttributes": function () {},
  "getAttributesHash": function () {},
  "getCacheKey": function () {},
  "getCaption": function () {},
  "getCommonAttributes": function () {},
  "getLength": function () {},
  "getValue": function () {},
  "hasAttribute": function () {},
  "hasSameAttributesAsPiece": function () {},
  "hasSameConstructorAs": function () {},
  "hasSameStringValueAsPiece": function () {},
  "inspect": function () {},
  "isBlockBreak": function () {},
  "isEmpty": function () {},
  "isEqualTo": function () {},
  "isSerializable": function () {},
  "removeProhibitedAttributes": function () {},
  "toConsole": function () {},
  "toJSON": function () {},
  "toJSONString": function () {},
  "toString": function () {},
  "toUTF16String": function () {}
};
Trix.AttachmentPiece.__super__.constructor.prototype = {
  "canBeConsolidatedWith": function () {},
  "canBeGrouped": function () {},
  "canBeGroupedWith": function () {},
  "constructor": function () {},
  "contentsForInspection": function () {},
  "copy": function () {},
  "copyWithAdditionalAttributes": function () {},
  "copyWithAttributes": function () {},
  "copyWithoutAttribute": function () {},
  "getAttribute": function () {},
  "getAttributes": function () {},
  "getAttributesHash": function () {},
  "getCacheKey": function () {},
  "getCommonAttributes": function () {},
  "getLength": function () {},
  "hasAttribute": function () {},
  "hasSameAttributesAsPiece": function () {},
  "hasSameConstructorAs": function () {},
  "hasSameStringValueAsPiece": function () {},
  "inspect": function () {},
  "isBlockBreak": function () {},
  "isEmpty": function () {},
  "isEqualTo": function () {},
  "isSerializable": function () {},
  "toJSON": function () {},
  "toJSONString": function () {},
  "toUTF16String": function () {}
};
Trix.AttachmentPiece.__super__.constructor.__super__.constructor.prototype = {
  "constructor": function () {},
  "contentsForInspection": function () {},
  "getCacheKey": function () {},
  "hasSameConstructorAs": function () {},
  "inspect": function () {},
  "isEqualTo": function () {},
  "toJSONString": function () {},
  "toUTF16String": function () {}
};
Trix.AttachmentPiece.__super__.constructor.types.string.prototype = {
  "canBeConsolidatedWith": function () {},
  "canBeGrouped": function () {},
  "canBeGroupedWith": function () {},
  "consolidateWith": function () {},
  "constructor": function () {},
  "contentsForInspection": function () {},
  "copy": function () {},
  "copyWithAdditionalAttributes": function () {},
  "copyWithAttributes": function () {},
  "copyWithoutAttribute": function () {},
  "getAttribute": function () {},
  "getAttributes": function () {},
  "getAttributesHash": function () {},
  "getCacheKey": function () {},
  "getCommonAttributes": function () {},
  "getLength": function () {},
  "getValue": function () {},
  "hasAttribute": function () {},
  "hasSameAttributesAsPiece": function () {},
  "hasSameConstructorAs": function () {},
  "hasSameStringValueAsPiece": function () {},
  "inspect": function () {},
  "isBlockBreak": function () {},
  "isEmpty": function () {},
  "isEqualTo": function () {},
  "isSerializable": function () {},
  "splitAtOffset": function () {},
  "toConsole": function () {},
  "toJSON": function () {},
  "toJSONString": function () {},
  "toString": function () {},
  "toUTF16String": function () {}
};
Trix.AttachmentPiece.types.string.prototype = {
  "canBeConsolidatedWith": function () {},
  "canBeGrouped": function () {},
  "canBeGroupedWith": function () {},
  "consolidateWith": function () {},
  "constructor": function () {},
  "contentsForInspection": function () {},
  "copy": function () {},
  "copyWithAdditionalAttributes": function () {},
  "copyWithAttributes": function () {},
  "copyWithoutAttribute": function () {},
  "getAttribute": function () {},
  "getAttributes": function () {},
  "getAttributesHash": function () {},
  "getCacheKey": function () {},
  "getCommonAttributes": function () {},
  "getLength": function () {},
  "getValue": function () {},
  "hasAttribute": function () {},
  "hasSameAttributesAsPiece": function () {},
  "hasSameConstructorAs": function () {},
  "hasSameStringValueAsPiece": function () {},
  "inspect": function () {},
  "isBlockBreak": function () {},
  "isEmpty": function () {},
  "isEqualTo": function () {},
  "isSerializable": function () {},
  "splitAtOffset": function () {},
  "toConsole": function () {},
  "toJSON": function () {},
  "toJSONString": function () {},
  "toString": function () {},
  "toUTF16String": function () {}
};
Trix.AttachmentPiece.types.string.__super__.constructor.prototype = {
  "canBeConsolidatedWith": function () {},
  "canBeGrouped": function () {},
  "canBeGroupedWith": function () {},
  "constructor": function () {},
  "contentsForInspection": function () {},
  "copy": function () {},
  "copyWithAdditionalAttributes": function () {},
  "copyWithAttributes": function () {},
  "copyWithoutAttribute": function () {},
  "getAttribute": function () {},
  "getAttributes": function () {},
  "getAttributesHash": function () {},
  "getCacheKey": function () {},
  "getCommonAttributes": function () {},
  "getLength": function () {},
  "hasAttribute": function () {},
  "hasSameAttributesAsPiece": function () {},
  "hasSameConstructorAs": function () {},
  "hasSameStringValueAsPiece": function () {},
  "inspect": function () {},
  "isBlockBreak": function () {},
  "isEmpty": function () {},
  "isEqualTo": function () {},
  "isSerializable": function () {},
  "toJSON": function () {},
  "toJSONString": function () {},
  "toUTF16String": function () {}
};
Trix.AttachmentPiece.types.string.__super__.constructor.__super__.constructor.prototype = {
  "constructor": function () {},
  "contentsForInspection": function () {},
  "getCacheKey": function () {},
  "hasSameConstructorAs": function () {},
  "inspect": function () {},
  "isEqualTo": function () {},
  "toJSONString": function () {},
  "toUTF16String": function () {}
};
Trix.AttachmentView.prototype = {
  "attachmentDidChangeUploadProgress": function () {},
  "cacheViewForObject": function () {},
  "constructor": function () {},
  "createCaptionElement": function () {},
  "createChildView": function () {},
  "createContentNodes": function () {},
  "createNodes": function () {},
  "disableViewCaching": function () {},
  "enableViewCaching": function () {},
  "findElement": function () {},
  "findElementForObject": function () {},
  "findOrCreateCachedChildView": function () {},
  "findProgressElement": function () {},
  "findViewForObject": function () {},
  "garbageCollectCachedViews": function () {},
  "getAllChildViews": function () {},
  "getCachedViewForObject": function () {},
  "getCaptionConfig": function () {},
  "getClassName": function () {},
  "getData": function () {},
  "getHref": function () {},
  "getNodes": function () {},
  "getViewCache": function () {},
  "invalidate": function () {},
  "invalidateViewForObject": function () {},
  "isViewCachingEnabled": function () {},
  "recordChildView": function () {}
};
Trix.AttachmentView.__super__.constructor.prototype = {
  "cacheViewForObject": function () {},
  "constructor": function () {},
  "createChildView": function () {},
  "disableViewCaching": function () {},
  "enableViewCaching": function () {},
  "findElement": function () {},
  "findElementForObject": function () {},
  "findOrCreateCachedChildView": function () {},
  "findViewForObject": function () {},
  "garbageCollectCachedViews": function () {},
  "getAllChildViews": function () {},
  "getCachedViewForObject": function () {},
  "getNodes": function () {},
  "getViewCache": function () {},
  "invalidate": function () {},
  "invalidateViewForObject": function () {},
  "isViewCachingEnabled": function () {},
  "recordChildView": function () {}
};
Trix.Block.prototype = {
  "addAttribute": function () {},
  "breaksOnReturn": function () {},
  "canBeConsolidatedWith": function () {},
  "canBeGrouped": function () {},
  "canBeGroupedWith": function () {},
  "consolidateWith": function () {},
  "constructor": function () {},
  "contentsForInspection": function () {},
  "copyUsingObjectMap": function () {},
  "copyWithAttributes": function () {},
  "copyWithText": function () {},
  "copyWithoutAttributes": function () {},
  "copyWithoutText": function () {},
  "decreaseNestingLevel": function () {},
  "findLineBreakInDirectionFromPosition": function () {},
  "getAttributeAtLevel": function () {},
  "getAttributeLevel": function () {},
  "getAttributes": function () {},
  "getBlockBreakPosition": function () {},
  "getCacheKey": function () {},
  "getLastAttribute": function () {},
  "getLastNestableAttribute": function () {},
  "getLength": function () {},
  "getListItemAttributes": function () {},
  "getNestableAttributes": function () {},
  "getNestingLevel": function () {},
  "getTextWithoutBlockBreak": function () {},
  "hasAttribute": function () {},
  "hasAttributes": function () {},
  "hasSameConstructorAs": function () {},
  "increaseNestingLevel": function () {},
  "inspect": function () {},
  "isEmpty": function () {},
  "isEqualTo": function () {},
  "isListItem": function () {},
  "isTerminalBlock": function () {},
  "removeAttribute": function () {},
  "removeLastAttribute": function () {},
  "splitAtOffset": function () {},
  "toJSON": function () {},
  "toJSONString": function () {},
  "toString": function () {},
  "toUTF16String": function () {}
};
Trix.Block.__super__.constructor.prototype = {
  "constructor": function () {},
  "contentsForInspection": function () {},
  "getCacheKey": function () {},
  "hasSameConstructorAs": function () {},
  "inspect": function () {},
  "isEqualTo": function () {},
  "toJSONString": function () {},
  "toUTF16String": function () {}
};
Trix.BlockView.prototype = {
  "cacheViewForObject": function () {},
  "constructor": function () {},
  "createChildView": function () {},
  "createContainerElement": function () {},
  "createNodes": function () {},
  "disableViewCaching": function () {},
  "enableViewCaching": function () {},
  "findElement": function () {},
  "findElementForObject": function () {},
  "findOrCreateCachedChildView": function () {},
  "findViewForObject": function () {},
  "garbageCollectCachedViews": function () {},
  "getAllChildViews": function () {},
  "getCachedViewForObject": function () {},
  "getNodes": function () {},
  "getViewCache": function () {},
  "invalidate": function () {},
  "invalidateViewForObject": function () {},
  "isViewCachingEnabled": function () {},
  "recordChildView": function () {},
  "shouldAddExtraNewlineElement": function () {}
};
Trix.BlockView.__super__.constructor.prototype = {
  "cacheViewForObject": function () {},
  "constructor": function () {},
  "createChildView": function () {},
  "disableViewCaching": function () {},
  "enableViewCaching": function () {},
  "findElement": function () {},
  "findElementForObject": function () {},
  "findOrCreateCachedChildView": function () {},
  "findViewForObject": function () {},
  "garbageCollectCachedViews": function () {},
  "getAllChildViews": function () {},
  "getCachedViewForObject": function () {},
  "getNodes": function () {},
  "getViewCache": function () {},
  "invalidate": function () {},
  "invalidateViewForObject": function () {},
  "isViewCachingEnabled": function () {},
  "recordChildView": function () {}
};
Trix.Composition.prototype = {
  "attachmentDidChangeAttributes": function () {},
  "attachmentDidChangePreviewURL": function () {},
  "breakFormattedBlock": function () {},
  "canDecreaseBlockAttributeLevel": function () {},
  "canDecreaseNestingLevel": function () {},
  "canIncreaseNestingLevel": function () {},
  "canSetCurrentAttribute": function () {},
  "canSetCurrentBlockAttribute": function () {},
  "canSetCurrentTextAttribute": function () {},
  "constructor": function () {},
  "createLocationRangeFromDOMRange": function () {},
  "decreaseBlockAttributeLevel": function () {},
  "decreaseListLevel": function () {},
  "decreaseNestingLevel": function () {},
  "deleteInDirection": function () {},
  "editAttachment": function () {},
  "expandSelectionAroundCommonAttribute": function () {},
  "expandSelectionForEditing": function () {},
  "expandSelectionInDirection": function () {},
  "forgetPlaceholder": function () {},
  "freezeSelection": function () {},
  "getAttachmentAtRange": function () {},
  "getAttachments": function () {},
  "getBlock": function () {},
  "getCurrentAttributes": function () {},
  "getCurrentTextAttributes": function () {},
  "getExpandedRangeInDirection": function () {},
  "getLocationRange": function () {},
  "getPointRange": function () {},
  "getPosition": function () {},
  "getPreviousBlock": function () {},
  "getSelectedAttachments": function () {},
  "getSelectedDocument": function () {},
  "getSelectedRange": function () {},
  "getSelectionManager": function () {},
  "getSnapshot": function () {},
  "hasCurrentAttribute": function () {},
  "hasFrozenSelection": function () {},
  "increaseNestingLevel": function () {},
  "insertAttachment": function () {},
  "insertAttachments": function () {},
  "insertBlock": function () {},
  "insertBlockBreak": function () {},
  "insertDocument": function () {},
  "insertFile": function () {},
  "insertFiles": function () {},
  "insertHTML": function () {},
  "insertLineBreak": function () {},
  "insertPlaceholder": function () {},
  "insertString": function () {},
  "insertText": function () {},
  "loadSnapshot": function () {},
  "locationIsCursorTarget": function () {},
  "moveCursorInDirection": function () {},
  "moveTextFromRange": function () {},
  "notifyDelegateOfCurrentAttributesChange": function () {},
  "notifyDelegateOfInsertionAtRange": function () {},
  "positionIsBlockBreak": function () {},
  "positionIsCursorTarget": function () {},
  "refreshAttachments": function () {},
  "removeAttachment": function () {},
  "removeAttributeForAttachment": function () {},
  "removeBlockAttribute": function () {},
  "removeCurrentAttribute": function () {},
  "removeLastBlockAttribute": function () {},
  "removeTextAttribute": function () {},
  "replaceHTML": function () {},
  "selectPlaceholder": function () {},
  "selectionContainsAttachments": function () {},
  "selectionIsExpanded": function () {},
  "selectionIsInCursorTarget": function () {},
  "setBlockAttribute": function () {},
  "setCurrentAttribute": function () {},
  "setDocument": function () {},
  "setLocationRangeFromPointRange": function () {},
  "setSelectedRange": function () {},
  "setSelection": function () {},
  "setTextAttribute": function () {},
  "shouldManageDeletingInDirection": function () {},
  "shouldManageMovingCursorInDirection": function () {},
  "stopEditingAttachment": function () {},
  "thawSelection": function () {},
  "toggleCurrentAttribute": function () {},
  "translateUTF16PositionFromOffset": function () {},
  "updateAttributesForAttachment": function () {},
  "updateCurrentAttributes": function () {},
  "withTargetDOMRange": function () {},
  "withTargetLocationRange": function () {},
  "withTargetRange": function () {}
};
Trix.CompositionController.prototype = {
  "attachmentEditorDidRequestDeselectingAttachment": function () {},
  "attachmentEditorDidRequestRemovalOfAttachment": function () {},
  "attachmentEditorDidRequestRemovingAttributeForAttachment": function () {},
  "attachmentEditorDidRequestUpdatingAttributesForAttachment": function () {},
  "canSyncDocumentView": function () {},
  "constructor": function () {},
  "didBlur": function () {},
  "didClickAttachment": function () {},
  "didFocus": function () {},
  "didUninstallAttachmentEditor": function () {},
  "disableViewCaching": function () {},
  "enableViewCaching": function () {},
  "findAttachmentForElement": function () {},
  "getSerializableElement": function () {},
  "installAttachmentEditorForAttachment": function () {},
  "invalidateViewForObject": function () {},
  "isEditingAttachment": function () {},
  "isViewCachingEnabled": function () {},
  "refreshViewCache": function () {},
  "render": function () {},
  "rerenderViewForObject": function () {},
  "uninstallAttachmentEditor": function () {}
};
Trix.Controller.prototype = {
  "constructor": function () {}
};
Trix.Document.prototype = {
  "addAttribute": function () {},
  "addAttributeAtRange": function () {},
  "applyBlockAttributeAtRange": function () {},
  "consolidateBlocksAtRange": function () {},
  "constructor": function () {},
  "contentsForInspection": function () {},
  "convertLineBreaksToBlockBreaksInRange": function () {},
  "copy": function () {},
  "copyUsingObjectMap": function () {},
  "copyUsingObjectsFromDocument": function () {},
  "copyWithBaseBlockAttributes": function () {},
  "eachBlock": function () {},
  "eachBlockAtRange": function () {},
  "expandRangeToLineBreaksAndSplitBlocks": function () {},
  "findRangesForBlockAttribute": function () {},
  "findRangesForTextAttribute": function () {},
  "getAttachmentById": function () {},
  "getAttachmentPieceForAttachment": function () {},
  "getAttachmentPieces": function () {},
  "getAttachments": function () {},
  "getBaseBlockAttributes": function () {},
  "getBlockAtIndex": function () {},
  "getBlockAtPosition": function () {},
  "getBlockCount": function () {},
  "getBlocks": function () {},
  "getCacheKey": function () {},
  "getCharacterAtPosition": function () {},
  "getCommonAttributesAtPosition": function () {},
  "getCommonAttributesAtRange": function () {},
  "getDocumentAtRange": function () {},
  "getEditCount": function () {},
  "getLength": function () {},
  "getLocationRangeOfAttachment": function () {},
  "getObjects": function () {},
  "getPieceAtPosition": function () {},
  "getPieces": function () {},
  "getRangeOfAttachment": function () {},
  "getRangeOfCommonAttributeAtPosition": function () {},
  "getStringAtRange": function () {},
  "getTextAtIndex": function () {},
  "getTextAtPosition": function () {},
  "getTexts": function () {},
  "hasSameConstructorAs": function () {},
  "insertBlockBreakAtRange": function () {},
  "insertDocumentAtRange": function () {},
  "insertTextAtRange": function () {},
  "inspect": function () {},
  "isEmpty": function () {},
  "isEqualTo": function () {},
  "locationFromPosition": function () {},
  "locationRangeFromPosition": function () {},
  "locationRangeFromRange": function () {},
  "mergeDocumentAtRange": function () {},
  "moveTextFromRangeToPosition": function () {},
  "positionFromLocation": function () {},
  "rangeFromLocationRange": function () {},
  "removeAttributeAtRange": function () {},
  "removeAttributeForAttachment": function () {},
  "removeBlockAttributesAtRange": function () {},
  "removeLastListAttributeAtRange": function () {},
  "removeLastTerminalAttributeAtRange": function () {},
  "removeTextAtRange": function () {},
  "replaceBlock": function () {},
  "toConsole": function () {},
  "toJSON": function () {},
  "toJSONString": function () {},
  "toSerializableDocument": function () {},
  "toString": function () {},
  "toUTF16String": function () {},
  "updateAttributesForAttachment": function () {}
};
Trix.Document.__super__.constructor.prototype = {
  "constructor": function () {},
  "contentsForInspection": function () {},
  "getCacheKey": function () {},
  "hasSameConstructorAs": function () {},
  "inspect": function () {},
  "isEqualTo": function () {},
  "toJSONString": function () {},
  "toUTF16String": function () {}
};
Trix.DocumentView.prototype = {
  "cacheViewForObject": function () {},
  "constructor": function () {},
  "createChildView": function () {},
  "createDocumentFragmentForSync": function () {},
  "didSync": function () {},
  "disableViewCaching": function () {},
  "enableViewCaching": function () {},
  "findElement": function () {},
  "findElementForObject": function () {},
  "findOrCreateCachedChildView": function () {},
  "findViewForObject": function () {},
  "garbageCollectCachedViews": function () {},
  "getAllChildViews": function () {},
  "getCachedViewForObject": function () {},
  "getNodes": function () {},
  "getViewCache": function () {},
  "invalidate": function () {},
  "invalidateViewForObject": function () {},
  "isSynced": function () {},
  "isViewCachingEnabled": function () {},
  "recordChildView": function () {},
  "render": function () {},
  "setDocument": function () {},
  "sync": function () {}
};
Trix.DocumentView.__super__.constructor.prototype = {
  "cacheViewForObject": function () {},
  "constructor": function () {},
  "createChildView": function () {},
  "disableViewCaching": function () {},
  "enableViewCaching": function () {},
  "findElement": function () {},
  "findElementForObject": function () {},
  "findOrCreateCachedChildView": function () {},
  "findViewForObject": function () {},
  "garbageCollectCachedViews": function () {},
  "getAllChildViews": function () {},
  "getCachedViewForObject": function () {},
  "getNodes": function () {},
  "getViewCache": function () {},
  "invalidate": function () {},
  "invalidateViewForObject": function () {},
  "isViewCachingEnabled": function () {},
  "recordChildView": function () {}
};
Trix.Editor.prototype = {
  "activateAttribute": function () {},
  "attributeIsActive": function () {},
  "canActivateAttribute": function () {},
  "canDecreaseNestingLevel": function () {},
  "canIncreaseNestingLevel": function () {},
  "canRedo": function () {},
  "canUndo": function () {},
  "deactivateAttribute": function () {},
  "decreaseNestingLevel": function () {},
  "deleteInDirection": function () {},
  "expandSelectionInDirection": function () {},
  "getClientRectAtPosition": function () {},
  "getDocument": function () {},
  "getPosition": function () {},
  "getSelectedDocument": function () {},
  "getSelectedRange": function () {},
  "getSnapshot": function () {},
  "increaseNestingLevel": function () {},
  "insertAttachment": function () {},
  "insertDocument": function () {},
  "insertFile": function () {},
  "insertFiles": function () {},
  "insertHTML": function () {},
  "insertLineBreak": function () {},
  "insertString": function () {},
  "insertText": function () {},
  "loadDocument": function () {},
  "loadHTML": function () {},
  "loadJSON": function () {},
  "loadSnapshot": function () {},
  "moveCursorInDirection": function () {},
  "recordUndoEntry": function () {},
  "redo": function () {},
  "setSelectedRange": function () {},
  "toJSON": function () {},
  "undo": function () {}
};
Trix.EditorController.prototype = {
  "actionIsExternal": function () {},
  "actions": function () {},
  "attachmentManagerDidRequestRemovalOfAttachment": function () {},
  "canInvokeAction": function () {},
  "compositionControllerDidBlur": function () {},
  "compositionControllerDidFocus": function () {},
  "compositionControllerDidRender": function () {},
  "compositionControllerDidRequestDeselectingAttachment": function () {},
  "compositionControllerDidRequestRemovalOfAttachment": function () {},
  "compositionControllerDidSelectAttachment": function () {},
  "compositionControllerDidSyncDocumentView": function () {},
  "compositionControllerWillSyncDocumentView": function () {},
  "compositionControllerWillUpdateAttachment": function () {},
  "compositionDidAddAttachment": function () {},
  "compositionDidChangeAttachmentPreviewURL": function () {},
  "compositionDidChangeCurrentAttributes": function () {},
  "compositionDidChangeDocument": function () {},
  "compositionDidEditAttachment": function () {},
  "compositionDidLoadSnapshot": function () {},
  "compositionDidPerformInsertionAtRange": function () {},
  "compositionDidRemoveAttachment": function () {},
  "compositionDidRequestChangingSelectionToLocationRange": function () {},
  "compositionDidStartEditingAttachment": function () {},
  "compositionDidStopEditingAttachment": function () {},
  "compositionShouldAcceptFile": function () {},
  "compositionWillLoadSnapshot": function () {},
  "constructor": function () {},
  "freezeSelection": function () {},
  "getCurrentActions": function () {},
  "getLocationContext": function () {},
  "getLocationRange": function () {},
  "getSelectionManager": function () {},
  "getTimeContext": function () {},
  "getUndoContext": function () {},
  "inputControllerDidAllowUnhandledInput": function () {},
  "inputControllerDidCancelDrag": function () {},
  "inputControllerDidHandleInput": function () {},
  "inputControllerDidPaste": function () {},
  "inputControllerDidReceiveDragOverPoint": function () {},
  "inputControllerDidReceiveKeyboardCommand": function () {},
  "inputControllerDidRequestRender": function () {},
  "inputControllerDidRequestReparse": function () {},
  "inputControllerDidStartDrag": function () {},
  "inputControllerWillAttachFiles": function () {},
  "inputControllerWillCutText": function () {},
  "inputControllerWillHandleInput": function () {},
  "inputControllerWillMoveText": function () {},
  "inputControllerWillPaste": function () {},
  "inputControllerWillPerformFormatting": function () {},
  "inputControllerWillPerformRedo": function () {},
  "inputControllerWillPerformTyping": function () {},
  "inputControllerWillPerformUndo": function () {},
  "invokeAction": function () {},
  "isFocused": function () {},
  "locationRangeDidChange": function () {},
  "notifyEditorElement": function () {},
  "recordFormattingUndoEntry": function () {},
  "recordTypingUndoEntry": function () {},
  "registerSelectionManager": function () {},
  "removeAttachment": function () {},
  "render": function () {},
  "reparse": function () {},
  "runEditorFilters": function () {},
  "setLocationRange": function () {},
  "thawSelection": function () {},
  "toolbarDidClickButton": function () {},
  "toolbarDidHideDialog": function () {},
  "toolbarDidInvokeAction": function () {},
  "toolbarDidRemoveAttribute": function () {},
  "toolbarDidShowDialog": function () {},
  "toolbarDidToggleAttribute": function () {},
  "toolbarDidUpdateAttribute": function () {},
  "toolbarWillShowDialog": function () {},
  "unregisterSelectionManager": function () {},
  "updateCurrentActions": function () {},
  "updateInputElement": function () {}
};
Trix.EditorController.__super__.constructor.prototype = {
  "constructor": function () {}
};
Trix.ElementStore.prototype = {
  "add": function () {},
  "remove": function () {},
  "reset": function () {}
};
Trix.FileVerificationOperation.prototype = {
  "catch": function () {},
  "constructor": function () {},
  "getPromise": function () {},
  "hasFailed": function () {},
  "hasPerformed": function () {},
  "hasSucceeded": function () {},
  "isPerforming": function () {},
  "perform": function () {},
  "release": function () {},
  "then": function () {}
};
Trix.FileVerificationOperation.__super__.constructor.prototype = {
  "catch": function () {},
  "constructor": function () {},
  "getPromise": function () {},
  "hasFailed": function () {},
  "hasPerformed": function () {},
  "hasSucceeded": function () {},
  "isPerforming": function () {},
  "perform": function () {},
  "release": function () {},
  "then": function () {}
};
Trix.HTMLParser.prototype = {
  "appendAttachmentWithAttributes": function () {},
  "appendBlockForAttributesWithElement": function () {},
  "appendBlockForElement": function () {},
  "appendEmptyBlock": function () {},
  "appendPiece": function () {},
  "appendStringToTextAtIndex": function () {},
  "appendStringWithAttributes": function () {},
  "constructor": function () {},
  "createHiddenContainer": function () {},
  "findBlockElementAncestors": function () {},
  "findParentBlockElement": function () {},
  "getBlockAttributes": function () {},
  "getDocument": function () {},
  "getMarginOfBlockElementAtIndex": function () {},
  "getMarginOfDefaultBlockElement": function () {},
  "getTextAttributes": function () {},
  "isBlockElement": function () {},
  "isExtraBR": function () {},
  "isInsignificantTextNode": function () {},
  "parse": function () {},
  "prependStringToTextAtIndex": function () {},
  "processElement": function () {},
  "processNode": function () {},
  "processTextNode": function () {},
  "removeHiddenContainer": function () {},
  "translateBlockElementMarginsToNewlines": function () {}
};
Trix.HTMLSanitizer.prototype = {
  "constructor": function () {},
  "getBody": function () {},
  "getHTML": function () {},
  "normalizeListElementNesting": function () {},
  "sanitize": function () {},
  "sanitizeElement": function () {},
  "sanitizeElements": function () {}
};
Trix.Hash.prototype = {
  "add": function () {},
  "constructor": function () {},
  "contentsForInspection": function () {},
  "get": function () {},
  "getCacheKey": function () {},
  "getKeys": function () {},
  "getKeysCommonToHash": function () {},
  "has": function () {},
  "hasSameConstructorAs": function () {},
  "inspect": function () {},
  "isEmpty": function () {},
  "isEqualTo": function () {},
  "merge": function () {},
  "remove": function () {},
  "slice": function () {},
  "toArray": function () {},
  "toJSON": function () {},
  "toJSONString": function () {},
  "toObject": function () {},
  "toUTF16String": function () {}
};
Trix.Hash.__super__.constructor.prototype = {
  "constructor": function () {},
  "contentsForInspection": function () {},
  "getCacheKey": function () {},
  "hasSameConstructorAs": function () {},
  "inspect": function () {},
  "isEqualTo": function () {},
  "toJSONString": function () {},
  "toUTF16String": function () {}
};
Trix.ImagePreloadOperation.prototype = {
  "catch": function () {},
  "constructor": function () {},
  "getPromise": function () {},
  "hasFailed": function () {},
  "hasPerformed": function () {},
  "hasSucceeded": function () {},
  "isPerforming": function () {},
  "perform": function () {},
  "release": function () {},
  "then": function () {}
};
Trix.ImagePreloadOperation.__super__.constructor.prototype = {
  "catch": function () {},
  "constructor": function () {},
  "getPromise": function () {},
  "hasFailed": function () {},
  "hasPerformed": function () {},
  "hasSucceeded": function () {},
  "isPerforming": function () {},
  "perform": function () {},
  "release": function () {},
  "then": function () {}
};
Trix.InputController.prototype = {
  "attachFiles": function () {},
  "constructor": function () {},
  "editorDidSyncDocumentView": function () {},
  "editorWillSyncDocumentView": function () {},
  "elementDidMutate": function () {},
  "events": function () {},
  "handleInput": function () {},
  "handlerFor": function () {},
  "requestRender": function () {},
  "requestReparse": function () {}
};
Trix.Level0InputController.prototype = {
  "attachFiles": function () {},
  "canAcceptDataTransfer": function () {},
  "constructor": function () {},
  "deleteInDirection": function () {},
  "editorDidSyncDocumentView": function () {},
  "editorWillSyncDocumentView": function () {},
  "elementDidMutate": function () {},
  "events": function () {},
  "expandSelectionInDirection": function () {},
  "getCompositionInput": function () {},
  "getPastedHTMLUsingHiddenElement": function () {},
  "getSelectedRange": function () {},
  "handleInput": function () {},
  "handlerFor": function () {},
  "isComposing": function () {},
  "keys": function () {},
  "mutationIsExpected": function () {},
  "mutationIsSignificant": function () {},
  "requestRender": function () {},
  "requestReparse": function () {},
  "reset": function () {},
  "resetInputSummary": function () {},
  "selectionIsExpanded": function () {},
  "selectionIsInCursorTarget": function () {},
  "serializeSelectionToDataTransfer": function () {},
  "setInputSummary": function () {},
  "setSelectedRange": function () {}
};
Trix.Level0InputController.__super__.constructor.prototype = {
  "attachFiles": function () {},
  "constructor": function () {},
  "editorDidSyncDocumentView": function () {},
  "editorWillSyncDocumentView": function () {},
  "elementDidMutate": function () {},
  "events": function () {},
  "handleInput": function () {},
  "handlerFor": function () {},
  "requestRender": function () {},
  "requestReparse": function () {}
};
Trix.Level2InputController.prototype = {
  "activateAttributeIfSupported": function () {},
  "attachFiles": function () {},
  "constructor": function () {},
  "deleteInDirection": function () {},
  "editorDidSyncDocumentView": function () {},
  "editorWillSyncDocumentView": function () {},
  "elementDidMutate": function () {},
  "events": function () {},
  "getTargetDOMRange": function () {},
  "handleInput": function () {},
  "handlerFor": function () {},
  "inputTypes": function () {},
  "insertString": function () {},
  "keys": function () {},
  "render": function () {},
  "reparse": function () {},
  "requestRender": function () {},
  "requestReparse": function () {},
  "scheduleRender": function () {},
  "toggleAttributeIfSupported": function () {},
  "withEvent": function () {},
  "withTargetDOMRange": function () {}
};
Trix.Level2InputController.__super__.constructor.prototype = {
  "attachFiles": function () {},
  "constructor": function () {},
  "editorDidSyncDocumentView": function () {},
  "editorWillSyncDocumentView": function () {},
  "elementDidMutate": function () {},
  "events": function () {},
  "handleInput": function () {},
  "handlerFor": function () {},
  "requestRender": function () {},
  "requestReparse": function () {}
};
Trix.LineBreakInsertion.prototype = {
  "shouldBreakFormattedBlock": function () {},
  "shouldDecreaseListLevel": function () {},
  "shouldInsertBlockBreak": function () {},
  "shouldPrependListItem": function () {},
  "shouldRemoveLastBlockAttribute": function () {}
};
Trix.LocationMapper.prototype = {
  "findAttachmentElementParentForNode": function () {},
  "findContainerAndOffsetFromLocation": function () {},
  "findLocationFromContainerAndOffset": function () {},
  "findNodeAndOffsetFromLocation": function () {},
  "getSignificantNodesForIndex": function () {}
};
Trix.ManagedAttachment.prototype = {
  "constructor": function () {},
  "getAttribute": function () {},
  "getAttributes": function () {},
  "getContentType": function () {},
  "getExtension": function () {},
  "getFile": function () {},
  "getFilename": function () {},
  "getFilesize": function () {},
  "getFormattedFilesize": function () {},
  "getHref": function () {},
  "getURL": function () {},
  "getUploadProgress": function () {},
  "hasAttribute": function () {},
  "isPending": function () {},
  "isPreviewable": function () {},
  "releaseFile": function () {},
  "remove": function () {},
  "setAttribute": function () {},
  "setAttributes": function () {},
  "setFile": function () {},
  "setUploadProgress": function () {}
};
Trix.MutationObserver.prototype = {
  "constructor": function () {},
  "didMutate": function () {},
  "findSignificantMutations": function () {},
  "getMutationSummary": function () {},
  "getMutationsByType": function () {},
  "getTextChangesFromCharacterData": function () {},
  "getTextChangesFromChildList": function () {},
  "getTextMutationSummary": function () {},
  "mutationIsSignificant": function () {},
  "nodeIsMutable": function () {},
  "nodeIsSignificant": function () {},
  "nodesModifiedByMutation": function () {},
  "reset": function () {},
  "start": function () {},
  "stop": function () {}
};
Trix.Object.prototype = {
  "constructor": function () {},
  "contentsForInspection": function () {},
  "getCacheKey": function () {},
  "hasSameConstructorAs": function () {},
  "inspect": function () {},
  "isEqualTo": function () {},
  "toJSONString": function () {},
  "toUTF16String": function () {}
};
Trix.ObjectGroup.prototype = {
  "getCacheKey": function () {},
  "getDepth": function () {},
  "getObjects": function () {}
};
Trix.ObjectGroupView.prototype = {
  "cacheViewForObject": function () {},
  "constructor": function () {},
  "createChildView": function () {},
  "createContainerElement": function () {},
  "createNodes": function () {},
  "disableViewCaching": function () {},
  "enableViewCaching": function () {},
  "findElement": function () {},
  "findElementForObject": function () {},
  "findOrCreateCachedChildView": function () {},
  "findViewForObject": function () {},
  "garbageCollectCachedViews": function () {},
  "getAllChildViews": function () {},
  "getCachedViewForObject": function () {},
  "getChildViews": function () {},
  "getNodes": function () {},
  "getViewCache": function () {},
  "invalidate": function () {},
  "invalidateViewForObject": function () {},
  "isViewCachingEnabled": function () {},
  "recordChildView": function () {}
};
Trix.ObjectGroupView.__super__.constructor.prototype = {
  "cacheViewForObject": function () {},
  "constructor": function () {},
  "createChildView": function () {},
  "disableViewCaching": function () {},
  "enableViewCaching": function () {},
  "findElement": function () {},
  "findElementForObject": function () {},
  "findOrCreateCachedChildView": function () {},
  "findViewForObject": function () {},
  "garbageCollectCachedViews": function () {},
  "getAllChildViews": function () {},
  "getCachedViewForObject": function () {},
  "getNodes": function () {},
  "getViewCache": function () {},
  "invalidate": function () {},
  "invalidateViewForObject": function () {},
  "isViewCachingEnabled": function () {},
  "recordChildView": function () {}
};
Trix.ObjectMap.prototype = {
  "constructor": function () {},
  "find": function () {}
};
Trix.ObjectView.prototype = {
  "cacheViewForObject": function () {},
  "constructor": function () {},
  "createChildView": function () {},
  "disableViewCaching": function () {},
  "enableViewCaching": function () {},
  "findElement": function () {},
  "findElementForObject": function () {},
  "findOrCreateCachedChildView": function () {},
  "findViewForObject": function () {},
  "garbageCollectCachedViews": function () {},
  "getAllChildViews": function () {},
  "getCachedViewForObject": function () {},
  "getNodes": function () {},
  "getViewCache": function () {},
  "invalidate": function () {},
  "invalidateViewForObject": function () {},
  "isViewCachingEnabled": function () {},
  "recordChildView": function () {}
};
Trix.Operation.prototype = {
  "catch": function () {},
  "constructor": function () {},
  "getPromise": function () {},
  "hasFailed": function () {},
  "hasPerformed": function () {},
  "hasSucceeded": function () {},
  "isPerforming": function () {},
  "perform": function () {},
  "release": function () {},
  "then": function () {}
};
Trix.Piece.prototype = {
  "canBeConsolidatedWith": function () {},
  "canBeGrouped": function () {},
  "canBeGroupedWith": function () {},
  "constructor": function () {},
  "contentsForInspection": function () {},
  "copy": function () {},
  "copyWithAdditionalAttributes": function () {},
  "copyWithAttributes": function () {},
  "copyWithoutAttribute": function () {},
  "getAttribute": function () {},
  "getAttributes": function () {},
  "getAttributesHash": function () {},
  "getCacheKey": function () {},
  "getCommonAttributes": function () {},
  "getLength": function () {},
  "hasAttribute": function () {},
  "hasSameAttributesAsPiece": function () {},
  "hasSameConstructorAs": function () {},
  "hasSameStringValueAsPiece": function () {},
  "inspect": function () {},
  "isBlockBreak": function () {},
  "isEmpty": function () {},
  "isEqualTo": function () {},
  "isSerializable": function () {},
  "toJSON": function () {},
  "toJSONString": function () {},
  "toUTF16String": function () {}
};
Trix.Piece.__super__.constructor.prototype = {
  "constructor": function () {},
  "contentsForInspection": function () {},
  "getCacheKey": function () {},
  "hasSameConstructorAs": function () {},
  "inspect": function () {},
  "isEqualTo": function () {},
  "toJSONString": function () {},
  "toUTF16String": function () {}
};
Trix.Piece.types.attachment.prototype = {
  "canBeConsolidatedWith": function () {},
  "canBeGrouped": function () {},
  "canBeGroupedWith": function () {},
  "constructor": function () {},
  "contentsForInspection": function () {},
  "copy": function () {},
  "copyWithAdditionalAttributes": function () {},
  "copyWithAttributes": function () {},
  "copyWithoutAttribute": function () {},
  "ensureAttachmentExclusivelyHasAttribute": function () {},
  "getAttribute": function () {},
  "getAttributes": function () {},
  "getAttributesHash": function () {},
  "getCacheKey": function () {},
  "getCaption": function () {},
  "getCommonAttributes": function () {},
  "getLength": function () {},
  "getValue": function () {},
  "hasAttribute": function () {},
  "hasSameAttributesAsPiece": function () {},
  "hasSameConstructorAs": function () {},
  "hasSameStringValueAsPiece": function () {},
  "inspect": function () {},
  "isBlockBreak": function () {},
  "isEmpty": function () {},
  "isEqualTo": function () {},
  "isSerializable": function () {},
  "removeProhibitedAttributes": function () {},
  "toConsole": function () {},
  "toJSON": function () {},
  "toJSONString": function () {},
  "toString": function () {},
  "toUTF16String": function () {}
};
Trix.Piece.types.string.prototype = {
  "canBeConsolidatedWith": function () {},
  "canBeGrouped": function () {},
  "canBeGroupedWith": function () {},
  "consolidateWith": function () {},
  "constructor": function () {},
  "contentsForInspection": function () {},
  "copy": function () {},
  "copyWithAdditionalAttributes": function () {},
  "copyWithAttributes": function () {},
  "copyWithoutAttribute": function () {},
  "getAttribute": function () {},
  "getAttributes": function () {},
  "getAttributesHash": function () {},
  "getCacheKey": function () {},
  "getCommonAttributes": function () {},
  "getLength": function () {},
  "getValue": function () {},
  "hasAttribute": function () {},
  "hasSameAttributesAsPiece": function () {},
  "hasSameConstructorAs": function () {},
  "hasSameStringValueAsPiece": function () {},
  "inspect": function () {},
  "isBlockBreak": function () {},
  "isEmpty": function () {},
  "isEqualTo": function () {},
  "isSerializable": function () {},
  "splitAtOffset": function () {},
  "toConsole": function () {},
  "toJSON": function () {},
  "toJSONString": function () {},
  "toString": function () {},
  "toUTF16String": function () {}
};
Trix.PieceView.prototype = {
  "cacheViewForObject": function () {},
  "constructor": function () {},
  "createAttachmentNodes": function () {},
  "createChildView": function () {},
  "createContainerElement": function () {},
  "createElement": function () {},
  "createNodes": function () {},
  "createStringNodes": function () {},
  "disableViewCaching": function () {},
  "enableViewCaching": function () {},
  "findElement": function () {},
  "findElementForObject": function () {},
  "findOrCreateCachedChildView": function () {},
  "findViewForObject": function () {},
  "garbageCollectCachedViews": function () {},
  "getAllChildViews": function () {},
  "getCachedViewForObject": function () {},
  "getNodes": function () {},
  "getViewCache": function () {},
  "invalidate": function () {},
  "invalidateViewForObject": function () {},
  "isViewCachingEnabled": function () {},
  "preserveSpaces": function () {},
  "recordChildView": function () {}
};
Trix.PieceView.__super__.constructor.prototype = {
  "cacheViewForObject": function () {},
  "constructor": function () {},
  "createChildView": function () {},
  "disableViewCaching": function () {},
  "enableViewCaching": function () {},
  "findElement": function () {},
  "findElementForObject": function () {},
  "findOrCreateCachedChildView": function () {},
  "findViewForObject": function () {},
  "garbageCollectCachedViews": function () {},
  "getAllChildViews": function () {},
  "getCachedViewForObject": function () {},
  "getNodes": function () {},
  "getViewCache": function () {},
  "invalidate": function () {},
  "invalidateViewForObject": function () {},
  "isViewCachingEnabled": function () {},
  "recordChildView": function () {}
};
Trix.PointMapper.prototype = {
  "createDOMRangeFromPoint": function () {},
  "getClientRectsForDOMRange": function () {}
};
Trix.PreviewableAttachmentView.prototype = {
  "attachmentDidChangeAttributes": function () {},
  "attachmentDidChangeUploadProgress": function () {},
  "cacheViewForObject": function () {},
  "constructor": function () {},
  "createCaptionElement": function () {},
  "createChildView": function () {},
  "createContentNodes": function () {},
  "createNodes": function () {},
  "disableViewCaching": function () {},
  "enableViewCaching": function () {},
  "findElement": function () {},
  "findElementForObject": function () {},
  "findOrCreateCachedChildView": function () {},
  "findProgressElement": function () {},
  "findViewForObject": function () {},
  "garbageCollectCachedViews": function () {},
  "getAllChildViews": function () {},
  "getCachedViewForObject": function () {},
  "getCaptionConfig": function () {},
  "getClassName": function () {},
  "getData": function () {},
  "getHref": function () {},
  "getNodes": function () {},
  "getViewCache": function () {},
  "invalidate": function () {},
  "invalidateViewForObject": function () {},
  "isViewCachingEnabled": function () {},
  "recordChildView": function () {},
  "refresh": function () {},
  "updateAttributesForImage": function () {}
};
Trix.PreviewableAttachmentView.__super__.constructor.prototype = {
  "attachmentDidChangeUploadProgress": function () {},
  "cacheViewForObject": function () {},
  "constructor": function () {},
  "createCaptionElement": function () {},
  "createChildView": function () {},
  "createContentNodes": function () {},
  "createNodes": function () {},
  "disableViewCaching": function () {},
  "enableViewCaching": function () {},
  "findElement": function () {},
  "findElementForObject": function () {},
  "findOrCreateCachedChildView": function () {},
  "findProgressElement": function () {},
  "findViewForObject": function () {},
  "garbageCollectCachedViews": function () {},
  "getAllChildViews": function () {},
  "getCachedViewForObject": function () {},
  "getCaptionConfig": function () {},
  "getClassName": function () {},
  "getData": function () {},
  "getHref": function () {},
  "getNodes": function () {},
  "getViewCache": function () {},
  "invalidate": function () {},
  "invalidateViewForObject": function () {},
  "isViewCachingEnabled": function () {},
  "recordChildView": function () {}
};
Trix.PreviewableAttachmentView.__super__.constructor.__super__.constructor.prototype = {
  "cacheViewForObject": function () {},
  "constructor": function () {},
  "createChildView": function () {},
  "disableViewCaching": function () {},
  "enableViewCaching": function () {},
  "findElement": function () {},
  "findElementForObject": function () {},
  "findOrCreateCachedChildView": function () {},
  "findViewForObject": function () {},
  "garbageCollectCachedViews": function () {},
  "getAllChildViews": function () {},
  "getCachedViewForObject": function () {},
  "getNodes": function () {},
  "getViewCache": function () {},
  "invalidate": function () {},
  "invalidateViewForObject": function () {},
  "isViewCachingEnabled": function () {},
  "recordChildView": function () {}
};
Trix.SelectionChangeObserver.prototype = {
  "constructor": function () {},
  "notifySelectionManagersOfSelectionChange": function () {},
  "registerSelectionManager": function () {},
  "reset": function () {},
  "run": function () {},
  "start": function () {},
  "stop": function () {},
  "unregisterSelectionManager": function () {},
  "update": function () {}
};
Trix.SelectionManager.prototype = {
  "clearSelection": function () {},
  "constructor": function () {},
  "createDOMRangeFromLocationRange": function () {},
  "createDOMRangeFromPoint": function () {},
  "createLocationRangeFromDOMRange": function () {},
  "didMouseDown": function () {},
  "domRangeWithinElement": function () {},
  "findContainerAndOffsetFromLocation": function () {},
  "findLocationFromContainerAndOffset": function () {},
  "findNodeAndOffsetFromLocation": function () {},
  "getClientRectAtLocationRange": function () {},
  "getClientRectsForDOMRange": function () {},
  "getLocationAtPoint": function () {},
  "getLocationRange": function () {},
  "locationIsCursorTarget": function () {},
  "lock": function () {},
  "pauseTemporarily": function () {},
  "selectionDidChange": function () {},
  "selectionIsCollapsed": function () {},
  "selectionIsExpanded": function () {},
  "setLocationRange": function () {},
  "setLocationRangeFromPointRange": function () {},
  "unlock": function () {},
  "updateCurrentLocationRange": function () {}
};
Trix.SplittableList.prototype = {
  "consolidate": function () {},
  "consolidateFromIndexToIndex": function () {},
  "constructor": function () {},
  "contentsForInspection": function () {},
  "eachObject": function () {},
  "editObjectAtIndex": function () {},
  "findIndexAndOffsetAtPosition": function () {},
  "findPositionAtIndexAndOffset": function () {},
  "getCacheKey": function () {},
  "getEndPosition": function () {},
  "getObjectAtIndex": function () {},
  "getObjectAtPosition": function () {},
  "getSplittableListInRange": function () {},
  "hasSameConstructorAs": function () {},
  "indexOf": function () {},
  "insertObjectAtIndex": function () {},
  "insertSplittableListAtIndex": function () {},
  "insertSplittableListAtPosition": function () {},
  "inspect": function () {},
  "isEqualTo": function () {},
  "removeObjectAtIndex": function () {},
  "removeObjectsInRange": function () {},
  "replaceObjectAtIndex": function () {},
  "selectSplittableList": function () {},
  "splice": function () {},
  "splitObjectAtPosition": function () {},
  "splitObjectsAtRange": function () {},
  "toArray": function () {},
  "toJSON": function () {},
  "toJSONString": function () {},
  "toString": function () {},
  "toUTF16String": function () {},
  "transformObjectsInRange": function () {}
};
Trix.SplittableList.__super__.constructor.prototype = {
  "constructor": function () {},
  "contentsForInspection": function () {},
  "getCacheKey": function () {},
  "hasSameConstructorAs": function () {},
  "inspect": function () {},
  "isEqualTo": function () {},
  "toJSONString": function () {},
  "toUTF16String": function () {}
};
Trix.StringPiece.prototype = {
  "canBeConsolidatedWith": function () {},
  "canBeGrouped": function () {},
  "canBeGroupedWith": function () {},
  "consolidateWith": function () {},
  "constructor": function () {},
  "contentsForInspection": function () {},
  "copy": function () {},
  "copyWithAdditionalAttributes": function () {},
  "copyWithAttributes": function () {},
  "copyWithoutAttribute": function () {},
  "getAttribute": function () {},
  "getAttributes": function () {},
  "getAttributesHash": function () {},
  "getCacheKey": function () {},
  "getCommonAttributes": function () {},
  "getLength": function () {},
  "getValue": function () {},
  "hasAttribute": function () {},
  "hasSameAttributesAsPiece": function () {},
  "hasSameConstructorAs": function () {},
  "hasSameStringValueAsPiece": function () {},
  "inspect": function () {},
  "isBlockBreak": function () {},
  "isEmpty": function () {},
  "isEqualTo": function () {},
  "isSerializable": function () {},
  "splitAtOffset": function () {},
  "toConsole": function () {},
  "toJSON": function () {},
  "toJSONString": function () {},
  "toString": function () {},
  "toUTF16String": function () {}
};
Trix.StringPiece.__super__.constructor.prototype = {
  "canBeConsolidatedWith": function () {},
  "canBeGrouped": function () {},
  "canBeGroupedWith": function () {},
  "constructor": function () {},
  "contentsForInspection": function () {},
  "copy": function () {},
  "copyWithAdditionalAttributes": function () {},
  "copyWithAttributes": function () {},
  "copyWithoutAttribute": function () {},
  "getAttribute": function () {},
  "getAttributes": function () {},
  "getAttributesHash": function () {},
  "getCacheKey": function () {},
  "getCommonAttributes": function () {},
  "getLength": function () {},
  "hasAttribute": function () {},
  "hasSameAttributesAsPiece": function () {},
  "hasSameConstructorAs": function () {},
  "hasSameStringValueAsPiece": function () {},
  "inspect": function () {},
  "isBlockBreak": function () {},
  "isEmpty": function () {},
  "isEqualTo": function () {},
  "isSerializable": function () {},
  "toJSON": function () {},
  "toJSONString": function () {},
  "toUTF16String": function () {}
};
Trix.StringPiece.__super__.constructor.__super__.constructor.prototype = {
  "constructor": function () {},
  "contentsForInspection": function () {},
  "getCacheKey": function () {},
  "hasSameConstructorAs": function () {},
  "inspect": function () {},
  "isEqualTo": function () {},
  "toJSONString": function () {},
  "toUTF16String": function () {}
};
Trix.StringPiece.__super__.constructor.types.attachment.prototype = {
  "canBeConsolidatedWith": function () {},
  "canBeGrouped": function () {},
  "canBeGroupedWith": function () {},
  "constructor": function () {},
  "contentsForInspection": function () {},
  "copy": function () {},
  "copyWithAdditionalAttributes": function () {},
  "copyWithAttributes": function () {},
  "copyWithoutAttribute": function () {},
  "ensureAttachmentExclusivelyHasAttribute": function () {},
  "getAttribute": function () {},
  "getAttributes": function () {},
  "getAttributesHash": function () {},
  "getCacheKey": function () {},
  "getCaption": function () {},
  "getCommonAttributes": function () {},
  "getLength": function () {},
  "getValue": function () {},
  "hasAttribute": function () {},
  "hasSameAttributesAsPiece": function () {},
  "hasSameConstructorAs": function () {},
  "hasSameStringValueAsPiece": function () {},
  "inspect": function () {},
  "isBlockBreak": function () {},
  "isEmpty": function () {},
  "isEqualTo": function () {},
  "isSerializable": function () {},
  "removeProhibitedAttributes": function () {},
  "toConsole": function () {},
  "toJSON": function () {},
  "toJSONString": function () {},
  "toString": function () {},
  "toUTF16String": function () {}
};
Trix.StringPiece.types.attachment.prototype = {
  "canBeConsolidatedWith": function () {},
  "canBeGrouped": function () {},
  "canBeGroupedWith": function () {},
  "constructor": function () {},
  "contentsForInspection": function () {},
  "copy": function () {},
  "copyWithAdditionalAttributes": function () {},
  "copyWithAttributes": function () {},
  "copyWithoutAttribute": function () {},
  "ensureAttachmentExclusivelyHasAttribute": function () {},
  "getAttribute": function () {},
  "getAttributes": function () {},
  "getAttributesHash": function () {},
  "getCacheKey": function () {},
  "getCaption": function () {},
  "getCommonAttributes": function () {},
  "getLength": function () {},
  "getValue": function () {},
  "hasAttribute": function () {},
  "hasSameAttributesAsPiece": function () {},
  "hasSameConstructorAs": function () {},
  "hasSameStringValueAsPiece": function () {},
  "inspect": function () {},
  "isBlockBreak": function () {},
  "isEmpty": function () {},
  "isEqualTo": function () {},
  "isSerializable": function () {},
  "removeProhibitedAttributes": function () {},
  "toConsole": function () {},
  "toJSON": function () {},
  "toJSONString": function () {},
  "toString": function () {},
  "toUTF16String": function () {}
};
Trix.StringPiece.types.attachment.__super__.constructor.prototype = {
  "canBeConsolidatedWith": function () {},
  "canBeGrouped": function () {},
  "canBeGroupedWith": function () {},
  "constructor": function () {},
  "contentsForInspection": function () {},
  "copy": function () {},
  "copyWithAdditionalAttributes": function () {},
  "copyWithAttributes": function () {},
  "copyWithoutAttribute": function () {},
  "getAttribute": function () {},
  "getAttributes": function () {},
  "getAttributesHash": function () {},
  "getCacheKey": function () {},
  "getCommonAttributes": function () {},
  "getLength": function () {},
  "hasAttribute": function () {},
  "hasSameAttributesAsPiece": function () {},
  "hasSameConstructorAs": function () {},
  "hasSameStringValueAsPiece": function () {},
  "inspect": function () {},
  "isBlockBreak": function () {},
  "isEmpty": function () {},
  "isEqualTo": function () {},
  "isSerializable": function () {},
  "toJSON": function () {},
  "toJSONString": function () {},
  "toUTF16String": function () {}
};
Trix.StringPiece.types.attachment.__super__.constructor.__super__.constructor.prototype = {
  "constructor": function () {},
  "contentsForInspection": function () {},
  "getCacheKey": function () {},
  "hasSameConstructorAs": function () {},
  "inspect": function () {},
  "isEqualTo": function () {},
  "toJSONString": function () {},
  "toUTF16String": function () {}
};
Trix.Text.prototype = {
  "addAttributeAtRange": function () {},
  "addAttributesAtRange": function () {},
  "appendText": function () {},
  "constructor": function () {},
  "contentsForInspection": function () {},
  "copy": function () {},
  "copyUsingObjectMap": function () {},
  "copyWithPieceList": function () {},
  "eachPiece": function () {},
  "endsWithString": function () {},
  "getAttachmentAndPositionById": function () {},
  "getAttachmentById": function () {},
  "getAttachmentPieces": function () {},
  "getAttachments": function () {},
  "getAttributesAtPosition": function () {},
  "getCacheKey": function () {},
  "getCommonAttributes": function () {},
  "getCommonAttributesAtRange": function () {},
  "getExpandedRangeForAttributeAtOffset": function () {},
  "getLength": function () {},
  "getPieceAtPosition": function () {},
  "getPieces": function () {},
  "getRangeOfAttachment": function () {},
  "getStringAtPosition": function () {},
  "getStringAtRange": function () {},
  "getTextAtRange": function () {},
  "hasSameConstructorAs": function () {},
  "insertTextAtPosition": function () {},
  "inspect": function () {},
  "isBlockBreak": function () {},
  "isEmpty": function () {},
  "isEqualTo": function () {},
  "moveTextFromRangeToPosition": function () {},
  "removeAttributeAtRange": function () {},
  "removeTextAtRange": function () {},
  "replaceTextAtRange": function () {},
  "setAttributesAtRange": function () {},
  "startsWithString": function () {},
  "toConsole": function () {},
  "toJSON": function () {},
  "toJSONString": function () {},
  "toSerializableText": function () {},
  "toString": function () {},
  "toUTF16String": function () {},
  "updateAttributesForAttachment": function () {}
};
Trix.Text.__super__.constructor.prototype = {
  "constructor": function () {},
  "contentsForInspection": function () {},
  "getCacheKey": function () {},
  "hasSameConstructorAs": function () {},
  "inspect": function () {},
  "isEqualTo": function () {},
  "toJSONString": function () {},
  "toUTF16String": function () {}
};
Trix.TextView.prototype = {
  "cacheViewForObject": function () {},
  "constructor": function () {},
  "createChildView": function () {},
  "createNodes": function () {},
  "disableViewCaching": function () {},
  "enableViewCaching": function () {},
  "findElement": function () {},
  "findElementForObject": function () {},
  "findOrCreateCachedChildView": function () {},
  "findViewForObject": function () {},
  "garbageCollectCachedViews": function () {},
  "getAllChildViews": function () {},
  "getCachedViewForObject": function () {},
  "getNodes": function () {},
  "getPieces": function () {},
  "getViewCache": function () {},
  "invalidate": function () {},
  "invalidateViewForObject": function () {},
  "isViewCachingEnabled": function () {},
  "recordChildView": function () {}
};
Trix.TextView.__super__.constructor.prototype = {
  "cacheViewForObject": function () {},
  "constructor": function () {},
  "createChildView": function () {},
  "disableViewCaching": function () {},
  "enableViewCaching": function () {},
  "findElement": function () {},
  "findElementForObject": function () {},
  "findOrCreateCachedChildView": function () {},
  "findViewForObject": function () {},
  "garbageCollectCachedViews": function () {},
  "getAllChildViews": function () {},
  "getCachedViewForObject": function () {},
  "getNodes": function () {},
  "getViewCache": function () {},
  "invalidate": function () {},
  "invalidateViewForObject": function () {},
  "isViewCachingEnabled": function () {},
  "recordChildView": function () {}
};
Trix.ToolbarController.prototype = {
  "applyKeyboardCommand": function () {},
  "constructor": function () {},
  "dialogIsVisible": function () {},
  "didClickActionButton": function () {},
  "didClickAttributeButton": function () {},
  "didClickDialogButton": function () {},
  "didKeyDownDialogInput": function () {},
  "eachActionButton": function () {},
  "eachAttributeButton": function () {},
  "getDialog": function () {},
  "hideDialog": function () {},
  "refreshActionButtons": function () {},
  "refreshAttributeButtons": function () {},
  "removeAttribute": function () {},
  "resetDialogInputs": function () {},
  "setAttribute": function () {},
  "showDialog": function () {},
  "toggleDialog": function () {},
  "updateActions": function () {},
  "updateAttributes": function () {}
};
Trix.UTF16String.prototype = {
  "charAt": function () {},
  "constructor": function () {},
  "getCacheKey": function () {},
  "isEqualTo": function () {},
  "offsetFromUCS2Offset": function () {},
  "offsetToUCS2Offset": function () {},
  "slice": function () {},
  "toJSON": function () {},
  "toString": function () {}
};
Trix.UndoManager.prototype = {
  "canRedo": function () {},
  "canUndo": function () {},
  "constructor": function () {},
  "createEntry": function () {},
  "recordUndoEntry": function () {},
  "redo": function () {},
  "undo": function () {}
};
Trix.selectionChangeObserver.constructor.prototype = {
  "constructor": function () {},
  "notifySelectionManagersOfSelectionChange": function () {},
  "registerSelectionManager": function () {},
  "reset": function () {},
  "run": function () {},
  "start": function () {},
  "stop": function () {},
  "unregisterSelectionManager": function () {},
  "update": function () {}
};
/**********************************************************************
 * End Generated Extern for Trix
/**********************************************************************/
